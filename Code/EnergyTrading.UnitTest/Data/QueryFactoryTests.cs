// <auto-generated />

namespace EnergyTrading.Test.Data
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using EnergyTrading.Contracts.Search;
    using EnergyTrading.Data;
    using EnergyTrading.Search;

    [TestClass]
    public class query_factory_tests 
    {
        [TestMethod]
        public void no_criteria_passed()
        {
            var search = new Search();
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual(string.Empty, result);
        }

        [TestMethod]
        public void find_by_equality()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.Or)
                  .AddCriteria("Name", SearchCondition.Equals, "TestParty");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Name = \"TestParty\")", result);
        }

        [TestMethod]
        public void find_by_not_equality()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.Or)
                  .AddCriteria("Name", SearchCondition.NotEquals, "TestParty");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Name != \"TestParty\")", result);
        }

        [TestMethod]
        public void find_by_equality_with_combinator()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.Or)
                  .AddCriteria("Name", SearchCondition.Equals, "TestParty")
                  .AddCriteria("Name", SearchCondition.Equals, "TestParty2");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Name = \"TestParty\" Or Name = \"TestParty2\")", result);
        }

        [TestMethod]
        public void find_by_numeric_equality()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Balance", SearchCondition.NumericEquals, "120");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Balance = 120)", result);
        }

        [TestMethod]
        public void find_by_lessthan()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Balance", SearchCondition.LessThan, "120", true);
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Balance < 120)", result);
        }

        [TestMethod]
        public void find_by_lessthanequal()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Balance", SearchCondition.LessThanEquals, "120", true);
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Balance <= 120)", result);
        }

        [TestMethod]
        public void find_by_greaterthan()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Balance", SearchCondition.GreaterThan, "120", true);
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Balance > 120)", result);
        }

        [TestMethod]
        public void find_by_greaterthanequal()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Balance", SearchCondition.GreaterThanEquals, "120", true);
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Balance >= 120)", result);
        }

        [TestMethod]
        public void find_by_equality_isnumeric()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Balance", SearchCondition.Equals, "120", true);
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Balance = 120)", result);
        }

        [TestMethod]
        public void find_by_name_or_other_name()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.Or)
                  .AddCriteria("Name", SearchCondition.Equals, "TestParty")
                  .AddCriteria("Name", SearchCondition.Equals, "TestParty2");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Name = \"TestParty\" Or Name = \"TestParty2\")", result);
        }

        [TestMethod]
        public void find_party_by_name_and_faxnumber()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Name", SearchCondition.Equals, "TestParty")
                  .AddCriteria("FaxNumber", SearchCondition.Equals, "01302555555");

            var result = new QueryFactory().CreateQuery(search);
            Assert.AreEqual("(Name = \"TestParty\" And FaxNumber = \"01302555555\")", result);
        }

        [TestMethod]
        public void find_party_by_two_wildcards_anded()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.And);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Name", SearchCondition.Contains, "Test")
                  .AddCriteria("Name", SearchCondition.Contains, "Party");

            var result = new QueryFactory().CreateQuery(search);
            Assert.AreEqual("(Name.Contains(\"Test\") And Name.Contains(\"Party\"))", result);
        }

        [TestMethod]
        public void find_party_with_two_search_criteria()
        {
            var search = SearchBuilder.CreateSearch(SearchCombinator.Or);
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Name",  SearchCondition.Equals, "Test")
                  .AddCriteria("FaxNumber", SearchCondition.Contains, "01302");
            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Name", SearchCondition.Equals, "Bob")
                  .AddCriteria("FaxNumber", SearchCondition.Contains, "01942");

            var result = new QueryFactory().CreateQuery(search);
            Assert.AreEqual("(Name = \"Test\" And FaxNumber.Contains(\"01302\")) Or (Name = \"Bob\" And FaxNumber.Contains(\"01942\"))", result);
        }

        [TestMethod]
        public void case_insensitive_mapping()
        {
            var search = new Search();

            search.SearchOptions.IsMappingSearch = true;
            search.SearchOptions.CaseSensitivity = false;

            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("MappingValue", SearchCondition.Contains, "Test");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(MappingValue.ToUpper().Contains(\"TEST\"))", result);
        }

        [TestMethod]
        public void case_sensitive_mapping()
        {
            var search = new Search();

            search.SearchOptions.IsMappingSearch = true;
            search.SearchOptions.CaseSensitivity = true;

            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("MappingValue", SearchCondition.Contains, "Test");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(MappingValue.Contains(\"Test\"))", result);
        }

        [TestMethod]
        public void case_insensitive_entity()
        {
            var search = new Search();

            search.SearchOptions.IsMappingSearch = false;
            search.SearchOptions.CaseSensitivity = false;

            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Name", SearchCondition.Contains, "Test");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Name.Contains(\"Test\"))", result);
        }

        [TestMethod]
        public void case_sensitive_entity()
        {
            var search = new Search();

            search.SearchOptions.IsMappingSearch = false;
            search.SearchOptions.CaseSensitivity = true;

            search.AddSearchCriteria(SearchCombinator.And)
                  .AddCriteria("Name", SearchCondition.Contains, "Test");
            var result = new QueryFactory().CreateQuery(search);

            Assert.AreEqual("(Name.Contains(\"Test\"))", result);
        }
    }
}